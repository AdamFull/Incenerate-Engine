auto voxfile = fs::read_file("models/monu2.vox");

const ogt_vox_scene* scene = ogt_vox_read_scene_with_flags(reinterpret_cast<const uint8_t*>(voxfile.c_str()), voxfile.size(), 0);
if (scene)
{
    for (uint32_t instance_index = 0; instance_index < scene->num_instances; instance_index++)
    {
        const ogt_vox_instance* instance = &scene->instances[instance_index];
        const ogt_vox_model* model = scene->models[instance->model_index];

        uint32_t voxel_index = 0;
        for (uint32_t z = 0; z < model->size_z; z++) 
        {
            auto zc = (float)z * 0.25f;
            for (uint32_t y = 0; y < model->size_y; y++) 
            {
                auto yc = (float)y * 0.25f;
                for (uint32_t x = 0; x < model->size_x; x++, voxel_index++)
                {
                    uint32_t color_index = model->voxel_data[voxel_index];

                    if (color_index != 0)
                    {
                        auto xc = (float)x * 0.25f;
                        auto color = ConvertToRGBA(scene->palette.color[color_index]);
                        vVertices.emplace_back(FVertex(glm::vec3(xc, yc, zc), color));
                    }
                }
            }
        }
    }
}

ogt_vox_destroy_scene(scene);