#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 16, local_size_y = 16) in;

layout(push_constant) uniform PushObject {
	float roughness;
} object;

layout(binding = 0, rgba32f) uniform writeonly imageCube outColour;

layout(binding = 1) uniform samplerCube samplerColour;

#include "../shared_shading.glsl"

const uint samples = 32u;

vec3 prefilterEnvMap(samplerCube envmap, vec3 R, float roughness) 
{
	vec3 N = R;
	vec3 V = R;
	vec3 colour = vec3(0.0f);
	float totalWeight = 0.0f;
	float envMapDim = float(textureSize(envmap, 0).s);

	for (uint i = 0u; i < samples; i++) 
    {
		vec2 Xi = hammersley2d(i, samples);
		vec3 H = importanceSample_GGX(Xi, roughness, N);
		vec3 L = 2.0f * dot(V, H) * H - V;
		float dotNL = clamp(dot(N, L), 0.0f, 1.0f);

		if (dotNL > 0.0f) 
        {
			// Filtering based on https://placeholderart.wordpress.com/2015/07/28/implementation-notes-runtime-environment-map-filtering-for-image-based-lighting/

			float dotNH = clamp(dot(N, H), 0.0f, 1.0f);
			float dotVH = clamp(dot(V, H), 0.0f, 1.0f);

			// Probability Distribution Function
			float pdf = D_GGX(dotNH, roughness) * dotNH / (4.0f * dotVH) + 0.0001f;
			// Slid angle of current smple
			float omegaS = 1.0f / (float(samples) * pdf);
			// Solid angle of 1 pixel across all cube faces
			float omegaP = 4.0f * PI / (6.0f * envMapDim * envMapDim);
			// Biased (+1.0) mip level for better result
			float mipLevel = roughness == 0.0f ? 0.0f : max(0.5f * log2(omegaS / omegaP) + 1.0f, 0.0f);
			colour += textureLod(envmap, L, mipLevel).rgb * dotNL;
			totalWeight += dotNL;

		}
	}

	return (colour / totalWeight);
}

void main() 
{
	vec2 uv = (gl_GlobalInvocationID.xy + vec2(0.5f)) / vec2(imageSize(outColour).xy);

	for (uint i = 0; i != 6; ++i) 
    {
		vec3 R = normalize(cubeDir(uv, i));
		imageStore(outColour, ivec3(gl_GlobalInvocationID.xy, i), vec4(prefilterEnvMap(samplerColour, R, object.roughness), 1.0f));
	}
}
