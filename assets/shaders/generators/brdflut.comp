#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0, rg16f) uniform writeonly image2D outColour;

#include "../shared_shading.glsl"

const uint NUM_SAMPLES = 1024u;

vec2 BRDF(float NoV, float roughness) 
{
	// Normal always points along z-axis for the 2D lookup 
	const vec3 N = vec3(0.0f, 0.0f, 1.0f);
	vec3 V = vec3(sqrt(1.0f - NoV * NoV), 0.0f, NoV);

	vec2 LUT = vec2(0.0f);

	for (uint i = 0u; i < NUM_SAMPLES; i++) 
    {
		vec2 Xi = hammersley2d(i, NUM_SAMPLES);
		vec3 H = importanceSample_GGX(Xi, roughness, N);
		vec3 L = 2.0f * dot(V, H) * H - V;

		float dotNL = max(dot(N, L), 0.0f);
		float dotNV = max(dot(N, V), 0.0f);
		float dotVH = max(dot(V, H), 0.0f); 
		float dotNH = max(dot(H, N), 0.0f);

		if (dotNL > 0.0f) 
        {
			float G = G_SchlicksmithGGX(dotNL, dotNV, roughness);
			float G_Vis = (G * dotVH) / (dotNH * dotNV);
			float Fc = pow(1.0f - dotVH, 5.0f);
			LUT += vec2((1.0f - Fc) * G_Vis, Fc * G_Vis);
		}
	}

	return LUT / float(NUM_SAMPLES);
}

void main() 
{
	vec2 uv = (gl_GlobalInvocationID.xy + vec2(0.5f)) / vec2(imageSize(outColour).xy);
	imageStore(outColour, ivec2(gl_GlobalInvocationID.xy), vec4(BRDF(uv.x, 1.0f - uv.y), 0.0f, 1.0f));
}