plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    ndkVersion '22.1.7171670'
    compileSdkVersion PROP_COMPILE_SDK_VERSION.toInteger()

    def mVersionName = ""
    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        def Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def mVersionCode = versionProps['VERSION_CODE'].toInteger() + 1

        def mVersionMajor = versionProps['VERSION_MAJOR'].toInteger()
        def mVersionMinor = versionProps['VERSION_MINOR'].toInteger()
        def mVersionPatch = versionProps['VERSION_PATCH'].toInteger() + 1

        if(mVersionPatch > 100)
        {
            mVersionPatch = 0;
            mVersionMinor = mVersionMinor + 1

            if(mVersionMinor > 100)
            {
                mVersionMinor = 0
                mVersionMajor = mVersionMajor + 1
            }
        }

        versionProps['VERSION_CODE'] = mVersionCode.toString()
        versionProps['VERSION_MAJOR'] = mVersionMajor.toString()
        versionProps['VERSION_MINOR'] = mVersionMinor.toString()
        versionProps['VERSION_PATCH'] = mVersionPatch.toString()
        versionProps.store(versionPropsFile.newWriter(), null)

        mVersionName = "v${versionProps['VERSION_MAJOR']}.${versionProps['VERSION_MINOR']}.${versionProps['VERSION_PATCH']}.${versionProps['VERSION_CODE']}"

        defaultConfig {
            applicationId "com.incenerateengine.myapplication"
            minSdkVersion PROP_MIN_SDK_VERSION
            targetSdkVersion PROP_TARGET_SDK_VERSION
            versionCode mVersionCode
            versionName mVersionName

            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
            externalNativeBuild {
                cmake {
                    targets 'incenerateengine'
                    arguments "-DCMAKE_FIND_ROOT_PATH=", "-DANDROID_STL=c++_static", "-DANDROID_TOOLCHAIN=clang", "-DANDROID_ARM_NEON=TRUE"
                    cppFlags "-std=c++2a -frtti -fexceptions -fsigned-char"
                }
            }

            ndk {
                abiFilters = []
                abiFilters.addAll(PROP_APP_ABI.split(':').collect{it as String})
            }
        }
    }
    else {
        throw new GradleException("Could not read version.properties!")
    }

    lintOptions {
        disable "Instantiatable"
    }

    sourceSets {
        main {
            java.srcDir "src"
            res.srcDir "res"
            manifest.srcFile "AndroidManifest.xml"
            assets.srcDir "../../assets"
        }
    }

    signingConfigs {
        release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            minifyEnabled false
            //shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }
        }

        debug {
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
        }
    }

    externalNativeBuild {
        cmake {
            path file('../../CMakeLists.txt')
            version '3.22.1'
        }
    }
}

android.applicationVariants.all { variant ->
    def dest_assets_folder = "${projectDir}/assets"
    def dest_pack_folder = "${projectDir}/../InstallPack/src/main/assets/"

    delete dest_pack_folder
    mkdir dest_pack_folder

    // delete previous files first
    delete dest_assets_folder
    def targetName = variant.name.capitalize()
    def copyTaskName = "copy${targetName}ResourcesToAssets"

    project.tasks.register(copyTaskName) {
        copy {
            from "${buildDir}/../../../assets"
            into "${buildDir}/intermediates/assets/${variant.dirName}"
            exclude "**/*.gz"
        }
    }
    tasks.getByName("pre${targetName}Build").dependsOn copyTaskName
}

dependencies {

    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:2.0.4'
    implementation project(path: ':libsdl')
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation "androidx.core:core-ktx:$kotlin_ktx_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}