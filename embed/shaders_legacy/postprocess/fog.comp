#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : require

#include "../shader_util.glsl"
#include "../compute_common.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 0, r11f_g11f_b10f) uniform writeonly image2D writeColor;
layout(binding = 1) uniform sampler2D samplerColor;
layout(binding = 2) uniform sampler2D samplerDepth;

layout(push_constant) uniform UBOFog
{
	vec3 color;
	vec3 cameraPos;
	mat4 invViewProjection;
	float fogDensity;
	float fogMax;
} ubo;

void main()
{
	uvec2 image_size = imageSize(writeColor);

	uvec2 px = uvec2(0, 0);
	vec2 uv = vec2(0.0, 0.0);
	if(swizzle_compute_workgroups_8x8(gl_GlobalInvocationID.xy, gl_LocalInvocationID.xy, image_size, uv, px))
		return;

	vec2 invUV = vec2(uv.x, 1.0 - uv.y);
	float depth = texture(samplerDepth, uv).r;
	vec3 position = getPositionFromDepth(invUV, depth, ubo.invViewProjection);

	float cameraToPixel = length(position - ubo.cameraPos);
	float distRatio = 4.0 * cameraToPixel / ubo.fogMax;
	float fogFactor = exp(-distRatio * ubo.fogDensity * distRatio * ubo.fogDensity);

	vec3 fragcolor = mix(ubo.color, texture(samplerColor, uv).rgb, fogFactor);

	imageStore(writeColor, ivec2(px), vec4(fragcolor, 1.0));
}