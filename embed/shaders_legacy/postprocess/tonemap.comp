#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : require

#include "../shader_util.glsl"
#include "../compute_common.glsl"

layout(local_size_x = 8, local_size_y = 8) in;

layout(binding = 3, r32f) uniform image2D target;
layout(binding = 4, rgba32f) uniform writeonly image2D writeColor;
layout(binding = 0) uniform sampler2D samplerColor;

layout(push_constant) uniform UBOTonemap
{
	int fxaa;
	float gamma;
	float exposure;
	float whitePoint;
	int adaptive;
} ubo;

vec3 convertXYZ2Yxy(vec3 _xyz)
{
	// Reference(s):
	// - XYZ to xyY
	//   https://web.archive.org/web/20191027010144/http://www.brucelindbloom.com/index.html?Eqn_XYZ_to_xyY.html
	float inv = 1.0/dot(_xyz, vec3(1.0, 1.0, 1.0) );
	return vec3(_xyz.y, _xyz.x*inv, _xyz.y*inv);
}

vec3 convertXYZ2RGB(vec3 _xyz)
{
	vec3 rgb;
	rgb.x = dot(vec3( 3.2404542, -1.5371385, -0.4985314), _xyz);
	rgb.y = dot(vec3(-0.9692660,  1.8760108,  0.0415560), _xyz);
	rgb.z = dot(vec3( 0.0556434, -0.2040259,  1.0572252), _xyz);
	return rgb;
}

vec3 convertRGB2XYZ(vec3 _rgb)
{
	// Reference(s):
	// - RGB/XYZ Matrices
	//   https://web.archive.org/web/20191027010220/http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
	vec3 xyz;
	xyz.x = dot(vec3(0.4124564, 0.3575761, 0.1804375), _rgb);
	xyz.y = dot(vec3(0.2126729, 0.7151522, 0.0721750), _rgb);
	xyz.z = dot(vec3(0.0193339, 0.1191920, 0.9503041), _rgb);
	return xyz;
}

vec3 convertYxy2XYZ(vec3 _Yxy)
{
	// Reference(s):
	// - xyY to XYZ
	//   https://web.archive.org/web/20191027010036/http://www.brucelindbloom.com/index.html?Eqn_xyY_to_XYZ.html
	vec3 xyz;
	xyz.x = _Yxy.x*_Yxy.y/_Yxy.z;
	xyz.y = _Yxy.x;
	xyz.z = _Yxy.x*(1.0 - _Yxy.y - _Yxy.z)/_Yxy.z;
	return xyz;
}

vec3 convertRGB2Yxy(vec3 _rgb)
{
	return convertXYZ2Yxy(convertRGB2XYZ(_rgb) );
}

vec3 convertYxy2RGB(vec3 _Yxy)
{
	return convertXYZ2RGB(convertYxy2XYZ(_Yxy) );
}

float reinhard2(float _x, float _whiteSqr)
{
	return (_x * (1.0 + _x/_whiteSqr) ) / (1.0 + _x);
}

vec3 toGamma(vec3 _rgb, float gamma)
{
	return pow(abs(_rgb), vec3(1.0 / gamma) );
}

void main()
{
	uvec2 image_size = imageSize(writeColor);

	uvec2 px = uvec2(0, 0);
	vec2 uv = vec2(0.0, 0.0);
	if(swizzle_compute_workgroups_8x8(gl_GlobalInvocationID.xy, gl_LocalInvocationID.xy, image_size, uv, px))
		return;

	vec3 fragcolor = texture(samplerColor, uv).xyz;

	float avgLum = imageLoad(target, ivec2(0, 0)).x;

    vec3 Yxy = convertRGB2Yxy(fragcolor);

    float lp = Yxy.x / (9.6 * avgLum + 0.0001);

	if(ubo.adaptive > 0)
		Yxy.x = reinhard2(lp, ubo.whitePoint);
	else
		Yxy.x = Yxy.x * pow(2.0, ubo.exposure);

    fragcolor = convertYxy2RGB(Yxy);
    fragcolor = toGamma(fragcolor, ubo.gamma);

	float fxaa_luma = 1.0;
	if(ubo.fxaa > 0)
		fxaa_luma = sqrt(dot(fragcolor, vec3(0.299, 0.587, 0.114))); //vec3(0.2125, 0.7154, 0.0721) vec3(0.299, 0.587, 0.114)

	imageStore(writeColor, ivec2(px), vec4(fragcolor, fxaa_luma));
}