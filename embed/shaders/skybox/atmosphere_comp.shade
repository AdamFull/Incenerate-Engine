{
	version: 460;

	enable_extensions: [
		"GL_ARB_separate_shader_objects",
		"GL_ARB_shading_language_420pack"
	];

	definitions: [];

	require_extensions: [];
	includes: ["shader_util", "lighting_base", "atmosphere/common", "compute_common"];

	code: 
	"""
		layout(local_size_x = 8, local_size_y = 8) in;

        layout(set = 1, binding = 0, r11f_g11f_b10f) uniform writeonly image2D writeColor;

        //-----------------------Constants------------------------
		layout (constant_id = 0) const uint MAX_DIRECTIONAL_LIGHTS_COUNT = 3;
        
        layout(std140, set = 0, binding = 0) uniform FCameraData 
        {
          	mat4 view;
          	mat4 invView;
          	mat4 projection;
          	mat4 invProjection;
            mat4 invViewProjection;
        } camera;
        
        layout(std140, set = 0, binding = 1) uniform FAtmosphereScattering 
        {
            int lightCount;
        } scattering;
        
        layout(std430, set = 0, binding = 2) buffer readonly UBOLights
        {
        	FDirectionalLight directionalLights[MAX_DIRECTIONAL_LIGHTS_COUNT];
        };
        
        void main()
        {
            uvec2 image_size = imageSize(writeColor);
        
        	uvec2 px = uvec2(0, 0);
        	vec2 uv = vec2(0.0, 0.0);
        	if(swizzle_compute_workgroups_8x8(gl_GlobalInvocationID.xy, gl_LocalInvocationID.xy, image_size, uv, px))
        		return;
        
            vec4 dirWorldSpace = vec4(0);
            const vec3 viewerPosition = vec3(camera.invView[3]);
            const vec3 origin = vec3(0, planetRadius, 0) + viewerPosition;
        
            dirWorldSpace.xyz = getPositionFromDepth(vec2(uv.x, 1.0 - uv.y), 1.0f, camera.invViewProjection).xyz;
        
            vec3 finalColor = vec3(0.0);
            for(int i = 0; i < scattering.lightCount; ++i)
            {
                const FDirectionalLight light = directionalLights[i];
                const vec3 dirToSun = normalize(-light.direction);
            
                finalColor += atmosphere(origin, dirWorldSpace.xyz, -dirToSun, light.intencity).rgb;
            }
            finalColor /= float(scattering.lightCount);
            finalColor = 1.0 - exp(-1.0 * finalColor);
        
            imageStore(writeColor, ivec2(px), vec4(finalColor, 1.0));
        }
	""";
}