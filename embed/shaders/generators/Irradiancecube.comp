#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0, rgba32f) uniform writeonly imageCube outColour;

layout(binding = 1) uniform samplerCube samplerColour;

#include "../shared_shading.glsl"

const float deltaPhi = (2.0f * PI) / 180.0f;
const float deltaTheta = (0.5f * PI) / 64.0f;

void main() 
{
	vec2 uv = (gl_GlobalInvocationID.xy + vec2(0.5f)) / vec2(imageSize(outColour).xy);

	for (uint i = 0; i != 6; ++i) 
	{
		vec3 N = normalize(cubeDir(uv, i));
		vec3 up = vec3(0.0f, 1.0f, 0.0f);
		vec3 right = normalize(cross(up, N));
		up = cross(N, right);

		const float TWO_PI = PI * 2.0f;
		const float HALF_PI = PI * 0.5f;

		vec3 colour = vec3(0.0f);
		uint sampleCount = 0u;

		for (float phi = 0.0f; phi < TWO_PI; phi += deltaPhi) 
		{
			for (float theta = 0.0f; theta < HALF_PI; theta += deltaTheta) 
			{
				vec3 tempVec = cos(phi) * right + sin(phi) * up;
				vec3 sampleVector = cos(theta) * N + sin(theta) * tempVec;
				colour += texture(samplerColour, sampleVector).rgb * cos(theta) * sin(theta);
				sampleCount++;
			}
		}

		imageStore(outColour, ivec3(gl_GlobalInvocationID.xy, i), vec4(PI * colour / float(sampleCount), 1.0f));
	}
}
