{
	includes: [];

	code: 
	"""
		float directionalShadowProjection(sampler2DArrayShadow shadomwap_tex, vec4 P, vec2 offset, float bias, int layer)
		{
			vec4 shadowCoord = P / P.w;
			shadowCoord.st = shadowCoord.st * 0.5 + 0.5;
			return texture(shadomwap_tex, vec4(shadowCoord.st + offset, layer, shadowCoord.z - bias));
		}
		
		float directionalShadowFilterPCF(sampler2DArrayShadow shadomwap_tex, vec4 sc, float bias, int layer)
		{
			ivec2 texDim = textureSize(shadomwap_tex, 0).xy;
			float scale = 1.5;
			float dx = scale * 1.0 / float(texDim.x);
			float dy = scale * 1.0 / float(texDim.y);
		
			float shadowFactor = 0.0;
			int count = 0;
			int range = 1;
			
			for (int x = -range; x <= range; x++)
			{
				for (int y = -range; y <= range; y++)
				{
					shadowFactor += directionalShadowProjection(shadomwap_tex, sc, vec2(dx*x, dy*y), bias, layer);
					count++;
				}
			
			}
			return shadowFactor / count;
		}
	""";
}