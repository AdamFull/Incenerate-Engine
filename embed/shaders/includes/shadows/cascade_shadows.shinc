{
	includes: [];

	code: 
	"""
		const bool enableCascadedPCF = true;
		
		const mat4 biasMat = mat4(
			0.5, 0.0, 0.0, 0.0,
			0.0, 0.5, 0.0, 0.0,
			0.0, 0.0, 1.0, 0.0,
			0.5, 0.5, 0.0, 1.0
		);
		
		float cascadeShadowProjection(sampler2DArrayShadow shadomwap_tex, vec4 shadowCoord, vec2 offset, uint cascadeIndex, float bias)
		{
			return texture(shadomwap_tex, vec4(shadowCoord.st + offset, cascadeIndex, shadowCoord.z - bias));
		}
		
		float cascadeShadowFilterPCF(sampler2DArrayShadow shadomwap_tex, vec4 sc, uint cascadeIndex, float bias)
		{
			ivec2 texDim = textureSize(shadomwap_tex, 0).xy;
			float scale = 0.75;
			float dx = scale * 1.0 / float(texDim.x);
			float dy = scale * 1.0 / float(texDim.y);
		
			float shadowFactor = 0.0;
			int count = 0;
			int range = 1;
			
			for (int x = -range; x <= range; x++) 
			{
				for (int y = -range; y <= range; y++) 
				{
					shadowFactor += cascadeShadowProjection(shadomwap_tex, sc, vec2(dx*x, dy*y), cascadeIndex, bias);
					count++;
				}
			}
			return shadowFactor / count;
		}
	""";
}