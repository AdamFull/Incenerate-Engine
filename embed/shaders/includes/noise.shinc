{
	includes: ["math"];

	code: 
	"""
		// https://www.shadertoy.com/view/3dVXDc
		
		#define UI0 1597334673U
		#define UI1 3812015801U
		#define UI2 uvec2(UI0, UI1)
		#define UI3 uvec3(UI0, UI1, 2798796415U)
		#define UIF (1.0 / float(0xffffffffU))
		
		vec3 hash33(vec3 p)
		{
			uvec3 q = uvec3(ivec3(p)) * UI3;
			q = (q.x ^ q.y ^ q.z) * UI3;
			return -1. + 2. * vec3(q) * UIF;
		}
		
		float tiledPerlin3D(vec3 position, float freq)
		{
			vec3 fraction = frac(position);
		
			float interpolatorX = easeInOut(fraction.x);
			float interpolatorY = easeInOut(fraction.y);
			float interpolatorZ = easeInOut(fraction.z);
		
			float cellNoiseZ[2];
			for (int z = 0; z <= 1; z++) 
			{
				float cellNoiseY[2];
				for (int y = 0; y <= 1; y++) 
				{
					float cellNoiseX[2];
					for (int x = 0; x <= 1; x++) 
					{
						vec3 cell = mod(floor(position) + vec3(x, y, z), freq);
						vec3 cellDirection = rand3Dto3D(cell) * 2.0f - 1.0f;
						vec3 compareVector = fraction - vec3(x, y, z);
						cellNoiseX[x] = dot(cellDirection, compareVector);
					}
					cellNoiseY[y] = mix(cellNoiseX[0], cellNoiseX[1], interpolatorX);
				}
				cellNoiseZ[z] = mix(cellNoiseY[0], cellNoiseY[1], interpolatorY);
			}
			return mix(cellNoiseZ[0], cellNoiseZ[1], interpolatorZ);
		}
		
		float tiledWorley3D(vec3 position, float freq)
		{
			vec3 id = floor(position);
			vec3 p = fract(position);
		
			float minDist = 10000.;
			for (float x = -1.; x <= 1.; ++x)
			{
				for (float y = -1.; y <= 1.; ++y)
				{
					for (float z = -1.; z <= 1.; ++z)
					{
						vec3 offset = vec3(x, y, z);
						vec3 h = hash33(mod(id + offset, vec3(freq))) * .5 + .5;
						h += offset;
						vec3 d = p - h;
						minDist = min(minDist, dot(d, d));
					}
				}
			}
		
			// inverted worley noise
			return minDist;
		}
		
		float fBmTiledPerlin(vec3 position, int octaves, float frequency, float gain, float lacunarity, float amplitude)
		{
			float result = 0.0;
		
			for (int i = 0; i < octaves; i++)
			{
				result += tiledPerlin3D(position, frequency) * amplitude;
				frequency *= lacunarity;
				position = position * lacunarity;
				amplitude *= gain;
			}
		
			return result;
		}
		
		float fBmTiledVoronoi(vec3 position, int octaves, float frequency, float gain, float lacunarity, float amplitude)
		{
			float result = 0.0;
		
			for (int i = 0; i < octaves; i++)
			{
				result += tiledWorley3D(position, frequency) * amplitude;
				frequency *= lacunarity;
				position = position * lacunarity;
				amplitude *= gain;
			}
		
			return result;
		}
		
		float fBmTiledWorley(vec3 position, int octaves, float frequency, float gain, float lacunarity, float amplitude)
		{
			return clamp((1.0f - fBmTiledVoronoi(position, octaves, frequency, gain, lacunarity, amplitude)) * 1.5f - 0.25f, 0.0f, 1.0f);
			//return fBmTiledVoronoi(position, octaves, frequency, gain, lacunarity, amplitude);
		}
	""";
}