{
	version: 450;

	enable_extensions: [
		"GL_ARB_separate_shader_objects",
		"GL_ARB_shading_language_420pack"
	];

	definitions: [];
	require_extensions: [];
	includes: [];

	code: 
	"""
		layout(local_size_x = 8, local_size_y = 8) in;

		layout(binding = 0, rgba8) uniform writeonly image2D outNoise;
		
		float rand(float n)
		{
			return fract(sin(n) * 43758.5453123);
		}
		
		float rand(vec2 n) { 
			return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);
		}
		
		float noise(vec2 p){
			vec2 ip = floor(p);
			vec2 u = fract(p);
			u = u*u*(3.0-2.0*u);
			
			float res = mix(
				mix(rand(ip),rand(ip+vec2(1.0,0.0)),u.x),
				mix(rand(ip+vec2(0.0,1.0)),rand(ip+vec2(1.0,1.0)),u.x),u.y);
			return res*res;
		}
		
		void main() 
		{
			vec2 position = (gl_GlobalInvocationID.xy );
			vec2 uv = (position + 0.5f) / vec2(imageSize(outNoise).xy);
		
			imageStore(outNoise, ivec2(gl_GlobalInvocationID.xy), vec4(noise(uv) * rand(uv), noise(uv) * rand(uv.rr), noise(uv) * rand(uv.gg), 1.0f));
		}
	""";
}