#version 450
#extension GL_ARB_compute_shader : enable

// Based on shader from this article https://bruop.github.io/exposure/

#define THREADS_X 256
#define THREADS_Y 1
#define GROUP_SIZE THREADS_X * THREADS_Y

layout (local_size_x = THREADS_X, local_size_y = THREADS_Y, local_size_z = 1) in;

layout(binding = 3, r32f) uniform image2D target;
layout (binding = 1) buffer Histogram { uint histogram[GROUP_SIZE]; };
layout (std140, binding = 2) uniform UBOParams 
{ 
	float minLogLum;
	float logLumRange;
	float timeCoeff;
	float numPixelsX;
	float numPixelsY;
};

shared uint histogramShared[GROUP_SIZE];

void main() 
{
	uint localIndex = gl_LocalInvocationIndex;

	// Get the count from the histogram buffer
	uint countForThisBin = histogram[localIndex];
	histogramShared[localIndex] = countForThisBin * localIndex;

	barrier();

	// Reset the count stored in the buffer in anticipation of the next pass
	histogram[localIndex] = 0;

	// This loop will perform a weighted count of the luminance range
	for (uint cutoff = (GROUP_SIZE >> 1); cutoff > 0; cutoff >>= 1) 
	{
		if (localIndex < cutoff)
			histogramShared[localIndex] += histogramShared[localIndex + cutoff];

		barrier();
	}

	// We only need to calculate this once, so only a single thread is needed.
	if (gl_GlobalInvocationID.x == 0) 
	{
		// Here we take our weighted sum and divide it by the number of pixels
		// that had luminance greater than zero (since the index == 0, we can
		// use countForThisBin to find the number of black pixels)
		float weightedLogAverage = (histogramShared[0] / max((numPixelsX * numPixelsY) - float(countForThisBin), 1.0)) - 1.0;

		// Map from our histogram space to actual luminance
		float weightedAvgLum = exp2(((weightedLogAverage / 254.0) * logLumRange) + minLogLum);

		// The new stored value will be interpolated using the last frames value
		// to prevent sudden shifts in the exposure.
		float lumLastFrame = imageLoad(target, ivec2(0, 0)).x;
		float adaptedLum = lumLastFrame + (weightedAvgLum - lumLastFrame) * timeCoeff;
		imageStore(target, ivec2(0, 0), vec4(adaptedLum, 0.0, 0.0, 0.0));
	}
}