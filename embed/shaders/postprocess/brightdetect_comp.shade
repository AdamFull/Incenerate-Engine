{
	version: 450;

	enable_extensions: [
		"GL_ARB_separate_shader_objects",
		"GL_ARB_shading_language_420pack"
	];

	definitions: [];
	require_extensions: [];
	includes: ["compute_common"];

	code: 
	"""
		layout(local_size_x = 8, local_size_y = 8) in;

		layout(binding = 0, r11f_g11f_b10f) uniform writeonly image2D writeColor;
		layout(binding = 1) uniform sampler2D samplerColor;
		
		layout(push_constant) uniform UBOBloom
		{
		    float bloom_threshold;
		} ubo;
		
		void main()
		{
		    uvec2 image_size = imageSize(writeColor);
		
			uvec2 px = uvec2(0, 0);
			vec2 uv = vec2(0.0, 0.0);
			if(swizzle_compute_workgroups_8x8(gl_GlobalInvocationID.xy, gl_LocalInvocationID.xy, image_size, uv, px))
				return;
		
		    vec4 color = vec4(0.0);
			vec3 fragcolor = texture(samplerColor, uv).rgb;
		    float brightness = dot(fragcolor, vec3(0.2126, 0.7152, 0.0722));
			if(brightness > ubo.bloom_threshold)
		        color = vec4(fragcolor, 1.0);
		    else
		        color = vec4(0.0, 0.0, 0.0, 1.0);
		
		    imageStore(writeColor, ivec2(px), color);
		}
	""";
}