#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : require

#include "../shader_util.glsl"

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0, rgba32f) uniform writeonly image2D writeColor;
layout(binding = 1) uniform sampler2D samplerColor;
layout(binding = 2) uniform sampler2D blurColor;

layout(push_constant) uniform UBOTonemap
{
	float gamma;
	float exposure;
	float bloomStrength;
} ubo;

void main()
{
	vec2 uv = (gl_GlobalInvocationID.xy + vec2(0.5f)) / vec2(imageSize(writeColor).xy);

	vec3 fragcolor = mix(texture(samplerColor, uv).xyz,  texture(blurColor, uv).xyz, ubo.bloomStrength);

	//Exposure
    fragcolor = Uncharted2Tonemap(fragcolor * ubo.exposure);
    //Gamma correction
    fragcolor = fragcolor * (1.0f / Uncharted2Tonemap(vec3(11.2f)));
    fragcolor = pow(fragcolor, vec3(1.0f / ubo.gamma));

	imageStore(writeColor, ivec2(gl_GlobalInvocationID.xy), vec4(fragcolor, 1.0));
}