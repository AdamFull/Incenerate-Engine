#version 450
#extension GL_ARB_compute_shader : enable

// Based on shader from this article https://bruop.github.io/exposure/

#define THREADS_X 16
#define THREADS_Y 16
#define GROUP_SIZE THREADS_X * THREADS_Y

#define EPSILON 0.005
#define RGB_TO_LUM vec3(0.2125, 0.7154, 0.0721)

layout (local_size_x = THREADS_X, local_size_y = THREADS_Y, local_size_z = 1) in;

layout(binding = 0) uniform sampler2D samplerColor;
layout (binding = 1) buffer Histogram { uint histogram[GROUP_SIZE]; };
layout (std140, binding = 2) uniform UBOParams { vec4 u_params; }; 

uint colorToBin(vec3 hdrColor, float minLogLum, float inverseLogLumRange) 
{
  float lum = dot(hdrColor, RGB_TO_LUM);

  if (lum < EPSILON) {
    return 0;
  }

  float logLum = clamp((log2(lum) - minLogLum) * inverseLogLumRange, 0.0, 1.0);

  return uint(logLum * 254.0 + 1.0);
}

shared uint histogramShared[GROUP_SIZE];

void main() 
{
  histogramShared[gl_LocalInvocationIndex] = 0;
  barrier();

  ivec2 dim = textureSize(samplerColor, 0).xy;
  if (gl_GlobalInvocationID.x < dim.x && gl_GlobalInvocationID.y < dim.y) 
  {
    vec3 hdrColor = texelFetch(samplerColor, ivec2(gl_GlobalInvocationID.xy), 0).xyz;
    uint binIndex = colorToBin(hdrColor, u_params.x, u_params.y);
    atomicAdd(histogramShared[binIndex], 1);
  }

  barrier();

  atomicAdd(histogram[gl_LocalInvocationIndex], histogramShared[gl_LocalInvocationIndex]);
}