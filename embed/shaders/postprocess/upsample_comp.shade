{
	version: 460;

	enable_extensions: [
		"GL_ARB_separate_shader_objects",
		"GL_ARB_shading_language_420pack"
	];

	definitions: [];
	require_extensions: [];
	includes: ["compute_common"];

	code: 
	"""
		// This shader performs upsampling on a texture,
		// as taken from Call Of Duty method, presented at ACM Siggraph 2014.
		
		// Remember to add bilinear minification filter for this texture!
		// Remember to use a floating-point texture format (for HDR)!
		// Remember to use edge clamping for this texture!

		layout(local_size_x = 8, local_size_y = 8) in;

        layout(binding = 0, r11f_g11f_b10f) uniform writeonly image2D writeColor;
        layout(binding = 1) uniform sampler2D samplerColor;
        
        layout(push_constant) uniform UBOUpsample
        {
            vec2 resolution;
        	float filter_radius;
        } ubo;
        
        void main()
        {
            uvec2 image_size = uvec2(ubo.resolution);
        
        	uvec2 px = uvec2(0, 0);
        	vec2 uv = vec2(0.0, 0.0);
        	if(swizzle_compute_workgroups_8x8(gl_GlobalInvocationID.xy, gl_LocalInvocationID.xy, image_size, uv, px))
        		return;
        
            // The filter kernel is applied with a radius, specified in texture
            // coordinates, so that the radius will vary across mip resolutions.
            float x = ubo.filter_radius;
            float y = ubo.filter_radius;
        
            // Take 9 samples around current texel:
            // a - b - c
            // d - e - f
            // g - h - i
            // === ('e' is the current texel) ===
            vec3 a = texture(samplerColor, vec2(uv.x - x, uv.y + y)).rgb;
            vec3 b = texture(samplerColor, vec2(uv.x,     uv.y + y)).rgb;
            vec3 c = texture(samplerColor, vec2(uv.x + x, uv.y + y)).rgb;
        
            vec3 d = texture(samplerColor, vec2(uv.x - x, uv.y)).rgb;
            vec3 e = texture(samplerColor, vec2(uv.x,     uv.y)).rgb;
            vec3 f = texture(samplerColor, vec2(uv.x + x, uv.y)).rgb;
        
            vec3 g = texture(samplerColor, vec2(uv.x - x, uv.y - y)).rgb;
            vec3 h = texture(samplerColor, vec2(uv.x,     uv.y - y)).rgb;
            vec3 i = texture(samplerColor, vec2(uv.x + x, uv.y - y)).rgb;
        
            // Apply weighted distribution, by using a 3x3 tent filter:
            //  1   | 1 2 1 |
            // -- * | 2 4 2 |
            // 16   | 1 2 1 |
            vec3 color = e*4.0;
            color += (b+d+f+h)*2.0;
            color += (a+c+g+i);
            color *= 1.0 / 16.0;
        
            imageStore(writeColor, ivec2(px), vec4(color, 1.0));
        }
	""";
}