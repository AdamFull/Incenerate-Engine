{
	version: 450;

	enable_extensions: [
		"GL_ARB_compute_shader"
	];

	definitions: [];
	require_extensions: [];
	includes: [];

	code: 
	"""
		// Based on shader from this article https://bruop.github.io/exposure/

        #define THREADS_X 16
        #define THREADS_Y 16
        #define GROUP_SIZE THREADS_X * THREADS_Y
        
        #define EPSILON 0.005
        #define RGB_TO_LUM vec3(0.2125, 0.7154, 0.0721)
        
        layout (local_size_x = THREADS_X, local_size_y = THREADS_Y, local_size_z = 1) in;
        
        layout(binding = 0) uniform sampler2D samplerColor;
        layout (binding = 1) buffer Histogram { uint histogram[GROUP_SIZE]; };
        layout (std140, binding = 2) uniform UBOParams 
        { 
            float minLogLum;
        	float logLumRange;
        	float timeCoeff;
        	float numPixelsX;
        	float numPixelsY;
        }; 
        
        // Shared histogram buffer used for storing intermediate sums for each work group
        shared uint histogramShared[GROUP_SIZE];
        
        // For a given color and luminance range, return the histogram bin index
        uint colorToBin(vec3 hdrColor, float fMinLogLum, float inverseLogLumRange) 
        {
            // Convert our RGB value to Luminance, see note for RGB_TO_LUM macro above
            float lum = dot(hdrColor, RGB_TO_LUM);
        
            // Avoid taking the log of zero
            if (lum < EPSILON) {
              return 0;
            }
        
            // Calculate the log_2 luminance and express it as a value in [0.0, 1.0]
            // where 0.0 represents the minimum luminance, and 1.0 represents the max.
            float logLum = clamp((log2(lum) - fMinLogLum) * inverseLogLumRange, 0.0, 1.0);
        
            // Map [0, 1] to [1, 255]. The zeroth bin is handled by the epsilon check above.
            return uint(logLum * 254.0 + 1.0);
        }
        
        void main() 
        {
            // Initialize the bin for this thread to 0
            histogramShared[gl_LocalInvocationIndex] = 0;
            barrier();
        
            ivec2 dim = textureSize(samplerColor, 0).xy;
        
            // Ignore threads that map to areas beyond the bounds of our HDR image
            if (gl_GlobalInvocationID.x < dim.x && gl_GlobalInvocationID.y < dim.y) 
            {
              vec3 hdrColor = texelFetch(samplerColor, ivec2(gl_GlobalInvocationID.xy) , 0).xyz;
              uint binIndex = colorToBin(hdrColor, minLogLum, 1.0 / logLumRange);
        
              // We use an atomic add to ensure we don't write to the same bin in our
            // histogram from two different threads at the same time.
              atomicAdd(histogramShared[binIndex], 1);
            }
        
             // Wait for all threads in the work group to reach this point before adding our
          // local histogram to the global one
            barrier();
        
            // Technically there's no chance that two threads write to the same bin here,
          // but different work groups might! So we still need the atomic add.
            atomicAdd(histogram[gl_LocalInvocationIndex], histogramShared[gl_LocalInvocationIndex]);
        }
	""";
}