#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : require

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0, r11f_g11f_b10f) uniform writeonly image2D writeColor;
layout(binding = 1) uniform sampler2D samplerDepth;
layout(binding = 2) uniform sampler2D samplerColor;
layout(binding = 3) uniform sampler2D samplerBlured;

layout(push_constant) uniform UBODepthOfField
{
	float nearPlane;
	float farPlane;

	float focusPoint;
	float nearField;
	float nearTransition;
	float farField;
	float farTransition;
} ubo;

float linearDepth(float depth) 
{
	float z = depth * 2.0f - 1.0f;
	return (2.0f * ubo.nearPlane * ubo.farPlane) / (ubo.farPlane + ubo.nearPlane - z * (ubo.farPlane - ubo.nearPlane));
}

void main()
{
	ivec2 iUV = ivec2(gl_GlobalInvocationID.xy);
	vec2 inUV = (iUV + 0.5f) / vec2(imageSize(writeColor).xy);

	float depth = linearDepth(texture(samplerDepth, inUV).r);
	vec3 textureColor = texture(samplerColor, inUV).rgb;
	vec3 textureBlured = texture(samplerBlured, inUV).rgb;

	float nearEnd = ubo.nearField + ubo.nearTransition;
	float farStart = ubo.farField - ubo.farTransition;

	float nearVisibility = smoothstep(ubo.nearField * ubo.focusPoint, nearEnd * ubo.focusPoint, depth);
	float farVisibility = 1.0f - smoothstep(farStart * ubo.focusPoint, ubo.farField * ubo.focusPoint, depth);

	vec4 color = vec4(mix(textureBlured, textureColor, nearVisibility), 1.0f);
	color.rgb = mix(textureBlured, color.rgb, farVisibility);

	imageStore(writeColor, iUV, color);
}