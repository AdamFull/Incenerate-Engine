#version 450
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable
#extension GL_GOOGLE_include_directive : require

#include "../math.glsl"

layout(local_size_x = 16, local_size_y = 16) in;

layout(binding = 0, r11f_g11f_b10f) uniform writeonly image2D writeColor;
layout(binding = 1) uniform sampler2D samplerColor;

layout(push_constant) uniform UBOBokehBlur
{
	int max_radius;
	float sides;
} ubo;

vec4 gamma_fun(vec4 vector, float gamma)
{
    return vec4(pow(vector.rgb, vec3(gamma)), vector.w);
}

void main()
{
	ivec2 iUV = ivec2(gl_GlobalInvocationID.xy);
	vec2 texSize = vec2(imageSize(writeColor).xy);
    vec2 texelSize = 1.0 / texSize;
	vec2 inUV = (iUV + 0.5f) / texSize;

	vec4 color = vec4(0.0);

	for (float x = -ubo.max_radius; x <= ubo.max_radius; x += 1.0)
    {
        for (float y = -ubo.max_radius; y <= ubo.max_radius; y += 1.0)
        {
            vec2 offset = vec2(x, y);
            float angle = atan(y, x);
            float radius = sqrt(dot(offset, offset));

            float paraPoly = cos(angle - (2.0 * PI * floor((PI + ubo.sides * angle) / (2.0 * PI))) / ubo.sides) / cos(PI / ubo.sides);
            float sdfPoly = paraPoly * radius - ubo.max_radius;
            float egdeFalloff = smoothstep(0.0, -1.0, sdfPoly);

            vec4 tap = texture(samplerColor, inUV  + texelSize.xy * offset.xy);

            tap = gamma_fun(tap, 4.0);
            color += tap * egdeFalloff;
        }
    }

    color.rgb /= color.www;
    color = gamma_fun(color, 1.0 / 4.0);

	imageStore(writeColor, iUV, vec4(color.rgb, 1.0));
}