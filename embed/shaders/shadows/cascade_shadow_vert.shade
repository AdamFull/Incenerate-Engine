{
	version: 460;

	enable_extensions: [];

	definitions: [];
	require_extensions: [ "GL_ARB_shader_viewport_layer_array" ];
	includes: [ "shadow_inputs" ];

	code: 
	"""
		layout(location = 0) in vec3 inPosition;
		layout(location = 1) in vec3 inColor;
		layout(location = 2) in vec3 inNormal;
		layout(location = 3) in vec2 inTexCoord;
		layout(location = 4) in vec4 inTangent;
		layout(location = 5) in vec4 inWeight0;
		layout(location = 6) in vec4 inJoint0;
		
		layout(push_constant) uniform UBOShadowmapModelData
		{
			mat4 viewProjMat;
			int layer;
			int hasSkin;
		} shadowData;
		
		void main()
		{
			mat4 instanceModel = instancing.instances[gl_InstanceIndex].model;
			vec4 instanceColor = instancing.instances[gl_InstanceIndex].color;
		
			mat4 modelMatrix = instanceModel * modelData.model;
			//mat4 modelMatrix = modelData.model;
		
			vec4 localPos;
			if(shadowData.hasSkin > 0)
			{
				mat4 skinMat = 
				inWeight0.x * jointMatrices[int(inJoint0.x)] +
				inWeight0.y * jointMatrices[int(inJoint0.y)] +
				inWeight0.z * jointMatrices[int(inJoint0.z)] +
				inWeight0.w * jointMatrices[int(inJoint0.w)];
				
				localPos = modelMatrix * skinMat * vec4(inPosition, 1.0);
			}
			else
			{
				localPos = modelMatrix * vec4(inPosition, 1.0);
			}
		
			localPos = vec4(localPos.xyz / localPos.w, 1.0);
		
			gl_Layer = shadowData.layer;
			gl_Position = shadowData.viewProjMat * localPos;
		}
	""";
}