cmake_minimum_required(VERSION 3.18.0)
project(IncenerateGraphics LANGUAGES CXX)

include(GenerateExportHeader)

option(INCENERATE_GRAPHICS_BUILD_SHARED "Build incenerate graphics as a shared library" ON)

file(GLOB GRAPHICS_SOURCES_HEAD "${CMAKE_CURRENT_SOURCE_DIR}/*.cpp")
set(GRAPHICS_SOURCE_FILES ${GRAPHICS_SOURCES_HEAD})

file(GLOB GRAPHICS_HEADERS_HEAD "${CMAKE_CURRENT_SOURCE_DIR}/*.h")
set(GRAPHICS_HEADER_FILES ${GRAPHICS_HEADERS_HEAD})

# buffers
file(GLOB GRAPHICS_SOURCES_BUFFERS "${CMAKE_CURRENT_SOURCE_DIR}/buffers/*.cpp")
set(GRAPHICS_SOURCE_FILES ${GRAPHICS_SOURCE_FILES} ${GRAPHICS_SOURCES_BUFFERS})

file(GLOB GRAPHICS_HEADERS_BUFFERS "${CMAKE_CURRENT_SOURCE_DIR}/buffers/*.h")
set(GRAPHICS_HEADER_FILES ${GRAPHICS_HEADER_FILES} ${GRAPHICS_HEADERS_BUFFERS})

# descriptors
file(GLOB GRAPHICS_SOURCES_DESCRIPTORS "${CMAKE_CURRENT_SOURCE_DIR}/descriptors/*.cpp")
set(GRAPHICS_SOURCE_FILES ${GRAPHICS_SOURCE_FILES} ${GRAPHICS_SOURCES_DESCRIPTORS})

file(GLOB GRAPHICS_HEADERS_DESCRIPTORS "${CMAKE_CURRENT_SOURCE_DIR}/descriptors/*.h")
set(GRAPHICS_HEADER_FILES ${GRAPHICS_HEADER_FILES} ${GRAPHICS_HEADERS_DESCRIPTORS})

# handlers
file(GLOB GRAPHICS_SOURCES_HANDLERS "${CMAKE_CURRENT_SOURCE_DIR}/handlers/*.cpp")
set(GRAPHICS_SOURCE_FILES ${GRAPHICS_SOURCE_FILES} ${GRAPHICS_SOURCES_HANDLERS})

file(GLOB GRAPHICS_HEADERS_HANDLERS "${CMAKE_CURRENT_SOURCE_DIR}/handlers/*.h")
set(GRAPHICS_HEADER_FILES ${GRAPHICS_HEADER_FILES} ${GRAPHICS_HEADERS_HANDLERS})

# image
file(GLOB GRAPHICS_SOURCES_IMAGE "${CMAKE_CURRENT_SOURCE_DIR}/image/*.cpp")
set(GRAPHICS_SOURCE_FILES ${GRAPHICS_SOURCE_FILES} ${GRAPHICS_SOURCES_IMAGE})

file(GLOB GRAPHICS_HEADERS_IMAGE "${CMAKE_CURRENT_SOURCE_DIR}/image/*.h")
set(GRAPHICS_HEADER_FILES ${GRAPHICS_HEADER_FILES} ${GRAPHICS_HEADERS_IMAGE})

# imgui impl
file(GLOB GRAPHICS_SOURCES_IMGUI_IMPL "${CMAKE_CURRENT_SOURCE_DIR}/imgui_impl/*.cpp")
set(GRAPHICS_SOURCE_FILES ${GRAPHICS_SOURCE_FILES} ${GRAPHICS_SOURCES_IMGUI_IMPL})

file(GLOB GRAPHICS_HEADERS_IMGUI_IMPL "${CMAKE_CURRENT_SOURCE_DIR}/imgui_impl/*.h")
set(GRAPHICS_HEADER_FILES ${GRAPHICS_HEADER_FILES} ${GRAPHICS_HEADERS_IMGUI_IMPL})

# pipeline
file(GLOB GRAPHICS_SOURCES_PIPELINE "${CMAKE_CURRENT_SOURCE_DIR}/pipeline/*.cpp")
set(GRAPHICS_SOURCE_FILES ${GRAPHICS_SOURCE_FILES} ${GRAPHICS_SOURCES_PIPELINE})

file(GLOB GRAPHICS_HEADERS_PIPELINE "${CMAKE_CURRENT_SOURCE_DIR}/pipeline/*.h")
set(GRAPHICS_HEADER_FILES ${GRAPHICS_HEADER_FILES} ${GRAPHICS_HEADERS_PIPELINE})

# rendering
file(GLOB_RECURSE GRAPHICS_SOURCES_RENDERING "${CMAKE_CURRENT_SOURCE_DIR}/rendering/*.cpp")
set(GRAPHICS_SOURCE_FILES ${GRAPHICS_SOURCE_FILES} ${GRAPHICS_SOURCES_RENDERING})

file(GLOB_RECURSE GRAPHICS_HEADERS_RENDERING "${CMAKE_CURRENT_SOURCE_DIR}/rendering/*.h")
set(GRAPHICS_HEADER_FILES ${GRAPHICS_HEADER_FILES} ${GRAPHICS_HEADERS_RENDERING})

# shader
file(GLOB GRAPHICS_SOURCES_SHADER "${CMAKE_CURRENT_SOURCE_DIR}/shader/*.cpp")
set(GRAPHICS_SOURCE_FILES ${GRAPHICS_SOURCE_FILES} ${GRAPHICS_SOURCES_SHADER})

file(GLOB GRAPHICS_HEADERS_SHADER "${CMAKE_CURRENT_SOURCE_DIR}/shader/*.h")
set(GRAPHICS_HEADER_FILES ${GRAPHICS_HEADER_FILES} ${GRAPHICS_HEADERS_SHADER})

# window
file(GLOB GRAPHICS_SOURCES_WINDOW "${CMAKE_CURRENT_SOURCE_DIR}/window/*.cpp")
set(GRAPHICS_SOURCE_FILES ${GRAPHICS_SOURCE_FILES} ${GRAPHICS_SOURCES_SHADER})

file(GLOB GRAPHICS_HEADERS_WINDOW "${CMAKE_CURRENT_SOURCE_DIR}/window/*.h")
set(GRAPHICS_HEADER_FILES ${GRAPHICS_HEADER_FILES} ${GRAPHICS_HEADERS_SHADER})

if(INCENERATE_GRAPHICS_BUILD_SHARED)
    add_library(${PROJECT_NAME} SHARED ${GRAPHICS_SOURCE_FILES} ${GRAPHICS_HEADER_FILES})
    target_compile_definitions(${PROJECT_NAME} PRIVATE -DIncenerateGraphics_EXPORTS)

    set_target_properties(${PROJECT_NAME} PROPERTIES
        RUNTIME_OUTPUT_DIRECTORY ${ENGINE_BINARIES_PATH}
        RUNTIME_OUTPUT_DIRECTORY_DEBUG ${ENGINE_BINARIES_PATH}
        RUNTIME_OUTPUT_DIRECTORY_RELEASE ${ENGINE_BINARIES_PATH}
        RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${ENGINE_BINARIES_PATH}
        RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${ENGINE_BINARIES_PATH}
    )
else()
    add_library(${PROJECT_NAME} STATIC ${CPPVFS_SOURCE_FILES} ${CPPVFS_HEADER_FILES})
    target_compile_definitions(${PROJECT_NAME} PUBLIC -DINCENERATEGRAPHICS_STATIC_DEFINE)
endif()

target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_17)
set_target_properties(${PROJECT_NAME} PROPERTIES
    CXX_STANDARD_REQUIRED ON
    CXX_EXTENSIONS OFF
)

add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/lib/glslanglib")
target_link_libraries(${PROJECT_NAME} PRIVATE glslang SPIRV)

add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/lib/imgui")
target_link_libraries(${PROJECT_NAME} PRIVATE imgui)

add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/lib/ktx")
target_link_libraries(${PROJECT_NAME} PRIVATE ktx)

add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/lib/SDL")
target_link_libraries(${PROJECT_NAME} PRIVATE SDL2::SDL2 SDL2::SDL2main)

add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/lib/spirvcross")
target_link_libraries(${PROJECT_NAME} PRIVATE spirv-cross-core spirv-cross-glsl)

add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/lib/vma")
target_link_libraries(${PROJECT_NAME} PRIVATE VulkanMemoryAllocator)

add_subdirectory("${CMAKE_CURRENT_SOURCE_DIR}/lib/vulkan")
target_link_libraries(${PROJECT_NAME} PRIVATE Vulkan-Headers)

generate_export_header(${PROJECT_NAME} 
              EXPORT_FILE_NAME ${CMAKE_BINARY_DIR}/exports/ie_graphics_exports.h
              EXPORT_MACRO_NAME INCENERATE_GRAPHICS_EXPORT
              NO_EXPORT_MACRO_NAME INCENERATE_GRAPHICS_NO_EXPORT
              DEPRECATED_MACRO_NAME INCENERATE_GRAPHICS_DEPRECATED
              NO_DEPRECATED_MACRO_NAME INCENERATE_GRAPHICS_NO_DEPRECATED
              )

target_include_directories(${PROJECT_NAME}  
    PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/lib/vulkan/include"
    PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/lib/SDL/include"
    PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/lib/ktx/include"
    PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/lib"
    PUBLIC "${MAIN_PROJECT_DIRECTORY_PATH}/tools/shader_compiler"
)